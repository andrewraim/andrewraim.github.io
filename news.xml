<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Andrew M. Raim</title>
<link>https://andrewraim.github.io/news.html</link>
<atom:link href="https://andrewraim.github.io/news.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.0.32</generator>
<lastBuildDate>Mon, 15 Aug 2022 04:00:00 GMT</lastBuildDate>
<item>
  <title>Browsing summary files from the decennial census with R</title>
  <link>https://andrewraim.github.io/posts/2022-08-15-sfreader.html</link>
  <description><![CDATA[ 



<p>If you have needed to use decennial census data without access to the internet, you may have encountered the raw data form of the summary files. These may be downloaded from the Census Bureau website for offline use; e.g., <a href="https://www.census.gov/data/datasets/2010/dec/summary-file-2.html">here</a>. The format of the files is compact but can be difficult to navigate. James Livsey, Kyle Irimata, and I prepared a <a href="https://www.census.gov/library/working-papers/2022/adrm/ssc2022-01.html">technical report</a> and a <a href="https://github.com/andrewraim/sfreader">package</a> to assist R users with this via the tidyverse. These materials focus on the 2010 SF2 summary file, but support for others may be added in the future as needed.</p>



 ]]></description>
  <category>programming</category>
  <guid>https://andrewraim.github.io/posts/2022-08-15-sfreader.html</guid>
  <pubDate>Mon, 15 Aug 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>knitr and Latex Documents</title>
  <link>https://andrewraim.github.io/posts/2022-06-27-knitr-latex.html</link>
  <description><![CDATA[ 



<p>Rmarkdown seems to be the most standard way to embed R code and results into a document. Markdown has many benefits compared to Latex: it is much easier to get started with and the source code is closer to a plain readable text document. It is also possible to use Latex within Markdown when an occasional equation is needed. But sometimes you really want to work in Latex without going through Markdown.</p>
<p>I have been aware that Sweave allows embedded R for Latex documents, but it seemed archaic compared to more modern R tools for reproducible research, and I avoided using it. Recently, I was made aware that <a href="https://www.overleaf.com/learn/latex/Knitr">Overleaf</a> supports authoring Sweave documents which require very little special markup and are almost like working in regular Latex. After some additional searching, I found that this is also possible without Overleaf. <a href="https://CRAN.R-project.org/package=knitr">knitr</a> has <a href="https://yihui.org/knitr/demo/sweave/">long been able</a> to do this.</p>
<p>Examples of Sweave with knitr can be found online, but I thought it would be worthwhile to post several more. See the repo <a href="https://github.com/andrewraim/sweave-examples" class="uri">https://github.com/andrewraim/sweave-examples</a> for an example in article format <a href="https://github.com/andrewraim/sweave-examples/raw/master/article/article-knitr.pdf">(pdf)</a> and one in Beamer slide format <a href="https://github.com/andrewraim/sweave-examples/raw/master/slides/slides-knitr.pdf">(pdf)</a>.</p>



 ]]></description>
  <category>workshops</category>
  <guid>https://andrewraim.github.io/posts/2022-06-27-knitr-latex.html</guid>
  <pubDate>Mon, 27 Jun 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Presentation for 2020 Joint Statistical Meetings</title>
  <link>https://andrewraim.github.io/posts/2020-08-03-JSM2020.html</link>
  <description><![CDATA[ 



<p>For this year’s virtual JSM, I am presenting in the session listed <a href="https://ww2.amstat.org/meetings/jsm/2020/onlineprogram/AbstractDetails.cfm?abstractid=309805">here</a>. Here are links to download the poster <a href="https://drive.google.com/uc?export=view&amp;id=1m4NIMm0kfrVRwsfigFHJDSUqOkCEHObA">PDF</a> and voiceover <a href="https://drive.google.com/uc?export=view&amp;id=1keGcR_2ZJ87nFicBbrPnvPh6nyGsvOLk">MP4</a>. Note that the files are hosted on Google Drive: if this is not accessible to you, email me for copies of the files.</p>



 ]]></description>
  <category>workshops</category>
  <guid>https://andrewraim.github.io/posts/2020-08-03-JSM2020.html</guid>
  <pubDate>Mon, 27 Jul 2020 04:00:00 GMT</pubDate>
</item>
<item>
  <title>R Workshop in Kerala</title>
  <link>https://andrewraim.github.io/posts/2017-12-20-Kerala-workshop.html</link>
  <description><![CDATA[ 



<section id="about-the-workshop" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> About the Workshop</h1>
<p><a href="http://www.csm.ornl.gov/~ost/">George Ostrouchov</a>, <a href="http://www.math.umbc.edu/people/neerchal.htm">Nagaraj Neerchal</a> and I are giving a two-day workshop <strong>High Performance Statistical Computing using R</strong> at the <em>International Conference on Recent Advances in Statistical Methodology with Applications in Clinical and Official Statistics</em> <a href="https://icsa2018.wordpress.com/">(ICSA 2018)</a>, Department of Statistics, St.&nbsp;Thomas College, Pala, Kerala, India. An abstract and brief outline for the workshop are given <a href="https://icsa2018.wordpress.com/workshop/">here</a>.</p>
<p>The workshop builds up to parallel and distributed computing in R, but begins by introducing basics of working in R. Previous experience with R and Rstudio will be helpful, but much of the material should be accessible to new R users with experience in another technical computing language such as Matlab, Python, or Julia. Applications involving statistical and machine learning methods will be presented throughout the workshop. A bachelors degree in a discipline such as statistics, computer science, or mathematics - OR equivalent work experience - should be sufficient to understand the methodology.</p>
<p>Attendees are encouraged to bring their laptops. Many example codes will be provided, and there will be opportunities at some points during the workshop for users to follow along. If you will be bringing your laptop, the remainder of this page discusses how to prepare it for the workshop.</p>
<ul>
<li><p>It is possible to manually install R, Rstudio, and all packages that will be used in the workshop. But this is quite impractical, especially for the material on parallel and distributed programming which varies somewhat based on the computing platform (Windows, Mac, Linux). Therefore, we highly suggest a second option…</p></li>
<li><p>Instead, we have prepared a <a href="https://www.docker.com">Docker</a> container, which is like a virtual machine. This will provide all attendees with the same programming environment which contains all the software needed for the workshop.</p></li>
</ul>
<p>Instructions to obtain and run the Docker container are given below. For attendees who cannot install Docker, alternative instructions are provided further below.</p>
<p>Workshop contents such as slides, programs, and dataset will be provided at the start of the workshop.</p>
</section>
<section id="installing-docker" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Installing Docker</h1>
<p>Follow instructions to install Docker based on your computing platform (Windows, Mac, or Linux). Look for the Community Edition, for which there is no cost to use. Also, we recommend the Stable release rather than the Edge release. Here are some brief notes specific to platform.</p>
<section id="windows" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="windows"><span class="header-section-number">2.1</span> Windows</h2>
<p>Note that Windows users who do not have Windows 10 Pro or Enterprise - which will probably be most of us - will need a version of Docker called <a href="https://docs.docker.com/toolbox/overview/">Docker Toolbox</a>. Once it is installed, open the Docker Quickstart Terminal to issue commands, which should appear as follows.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://andrewraim.github.io/images/Kerala2018/win-docker-prompt.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Logging into Rstudio Server</figcaption><p></p>
</figure>
</div>
<p>Take note of the IP address listed in the output; we will use it later when connecting to Rstudio.</p>
<p>I initially had some trouble installing Docker Toolbox on Windows 10 Home. I believe it was due to low disk space - I suggest having at least a 5-10 GB available before installing. For me, a solution was to remove Docker Toolbox, and the Oracle VirtualBox program installed with it, remove the <code>.docker</code> and <code>.virtualbox</code> subdirectories in <code>C:\Users\Andrew</code>, and rerun the Docker Toolbox installer. It may also be helpful to temporarily turn off Windows Firewall, or your antivirus program’s firewall if you have one, during the installation.</p>
</section>
<section id="linux" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="linux"><span class="header-section-number">2.2</span> Linux</h2>
<p>Linux users should follow the <a href="https://docs.docker.com/engine/installation/">installation instructions</a> specific to their Linux distribution (Ubuntu, CentOS, etc). Once it is installed, Docker can be controlled through the system terminal.</p>
<p>Note that Docker commands on Linux need administrator-level access, and must be prefixed with <code>sudo</code>. Because we anticipate mostly Windows users in attendance, the <code>sudo</code> has been left out of the commands shown on the remainder of this page.</p>
</section>
<section id="mac" class="level2" data-number="2.3">
<h2 data-number="2.3" class="anchored" data-anchor-id="mac"><span class="header-section-number">2.3</span> Mac</h2>
<p>Mac users should follow their set of <a href="https://docs.docker.com/engine/installation/">installation instructions</a>. As with Linux, once Docker is installed on a Mac, it can be controlled through the Terminal application. <code>sudo</code> is also needed for Mac when executing Docker commands.</p>
</section>
<section id="a-quick-test-of-your-docker-setup" class="level2" data-number="2.4">
<h2 data-number="2.4" class="anchored" data-anchor-id="a-quick-test-of-your-docker-setup"><span class="header-section-number">2.4</span> A Quick Test of your Docker Setup</h2>
<p>In your terminal, issue the following command.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;">$</span> docker run hello-world</span></code></pre></div>
<p>Here, <code>$</code> represents the prompt, which is not part of the command. If your Docker setup is working, you should get the following result.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;">$</span> docker run hello-world</span>
<span id="cb2-2"><span class="ex" style="color: null;">Hello</span> from Docker!</span>
<span id="cb2-3"><span class="ex" style="color: null;">This</span> message shows that your installation appears to be working correctly.</span>
<span id="cb2-4"><span class="ex" style="color: null;">To</span> generate this message, Docker took the following steps:</span>
<span id="cb2-5"> <span class="ex" style="color: null;">1.</span> The Docker client contacted the Docker daemon.</span>
<span id="cb2-6"> <span class="ex" style="color: null;">2.</span> The Docker daemon pulled the <span class="st" style="color: #20794D;">"hello-world"</span> image from the Docker Hub.</span>
<span id="cb2-7">    <span class="kw" style="color: #003B4F;">(</span><span class="ex" style="color: null;">amd64</span><span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb2-8"> <span class="ex" style="color: null;">3.</span> The Docker daemon created a new container from that image which runs the</span>
<span id="cb2-9">    <span class="ex" style="color: null;">executable</span> that produces the output you are currently reading.</span>
<span id="cb2-10"> <span class="ex" style="color: null;">4.</span> The Docker daemon streamed that output to the Docker client, which sent it</span>
<span id="cb2-11">    <span class="ex" style="color: null;">to</span> your terminal.</span>
<span id="cb2-12"><span class="ex" style="color: null;">To</span> try something more ambitious, you can run an Ubuntu container with:</span>
<span id="cb2-13"> <span class="ex" style="color: null;">$</span> docker run <span class="at" style="color: #657422;">-it</span> ubuntu bash</span>
<span id="cb2-14"><span class="ex" style="color: null;">Share</span> images, automate workflows, and more with a free Docker ID:</span>
<span id="cb2-15"> <span class="ex" style="color: null;">https://cloud.docker.com/</span></span>
<span id="cb2-16"><span class="ex" style="color: null;">For</span> more examples and ideas, visit:</span>
<span id="cb2-17"> <span class="ex" style="color: null;">https://docs.docker.com/engine/userguide/</span></span></code></pre></div>
</section>
</section>
<section id="downloading-workshop-config-files" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Downloading Workshop Config Files</h1>
<p>Download the workshop’s <a href="https://drive.google.com/uc?export=view&amp;id=1CEnhcye1ifSdQHJKBalf20ZiVdeIyZII">Dockerfile</a> and accompanying <a href="https://drive.google.com/uc?export=view&amp;id=15hFA_kSpGmUddMa8tSyqN574h-SIB_zA">start.sh</a>. Save the files to a folder where you will keep workshop materials. Let us call this directory <code>/path/to/workshop</code>.</p>
<p>In Windows, my web browser renamed <code>Dockerfile</code> to <code>Dockerfile.txt</code> when it was downloaded. If this happens, rename the file and remove the <code>.txt</code> extension.</p>
<p>After downloading <code>start.sh</code>, Linux and Mac users may need to modify its permissions before the Docker container will run. Ensure that the script can be executed via the following command.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;">$</span> chmod +x start.sh</span></code></pre></div>
</section>
<section id="preparing-and-running-the-workshop-container" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Preparing and Running the Workshop Container</h1>
<p>The following “build” command downloads and builds all of the prerequisites used in the container. It may take a while to run, especially on a slower network or a slower computer. For me it typically takes 20 or 30 minutes (roughly).</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;">$</span> docker build <span class="at" style="color: #657422;">-t</span> rworkshop /path/to/workshop</span></code></pre></div>
<p>The build command does not need to be run again unless the Dockerfile is changed, or unless your deployment changes. If the build was successful, the last few lines of output should be something like the following.</p>
<pre><code>Successfully built f5055a2787e5
Successfully tagged rworkshop:latest</code></pre>
<p>The container can now be run using the following “run” command (which is proceeded by defining two environment variables for our convenience).</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;">$</span> export XSOCK=/tmp/.X11-unix/X0</span>
<span id="cb6-2"><span class="ex" style="color: null;">$</span> export EXT=/path/to/workshop</span>
<span id="cb6-3"><span class="ex" style="color: null;">$</span> docker run <span class="at" style="color: #657422;">-v</span> <span class="va" style="color: #111111;">$XSOCK</span>:<span class="va" style="color: #111111;">$XSOCK</span> <span class="at" style="color: #657422;">-v</span> <span class="va" style="color: #111111;">$EXT</span>:/home/rstudio/ext <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb6-4">    <span class="at" style="color: #657422;">-p</span> 8787:8787 <span class="at" style="color: #657422;">-i</span> <span class="at" style="color: #657422;">-t</span> rworkshop</span></code></pre></div>
<p>Note that: * The option <code>-v $XSOCK:$XSOCK</code> allows the container to display graphics. This is useful for packages such as <code>Rcmdr</code>. * The option <code>-v $EXT:/home/rstudio/ext</code> makes the directory <code>$EXT</code> on your computer available inside the container as <code>/home/rstudio/ext</code>. This will allow you to load files from your local machine into the container, and to save work from the container back to your local machine. * The option <code>-p 8787:8787</code> exposes port 8787 from the container on your computer. This is needed to use Rstudio in the container. * The flags <code>-i</code> and <code>-t</code> are specified because the container is interactive. * The <code>\</code> character is used to break up a long command into multiple lines.</p>
</section>
<section id="using-r-in-the-container" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Using R in the Container</h1>
<p>Once the container is successfully started, you will encounter a Linux command prompt like the following.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;">rstudio@a8f9a900c791:~$</span></span></code></pre></div>
<section id="r-on-the-command-line" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="r-on-the-command-line"><span class="header-section-number">5.1</span> R on the Command Line</h2>
<p>To start R on the command line, issue the <code>R</code> command.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;">rstudio@a8f9a900c791:~$</span> R</span>
<span id="cb8-2"><span class="op" style="color: #5E5E5E;">&gt;</span> cat<span class="kw" style="color: #003B4F;">(</span><span class="st" style="color: #20794D;">"Hello world\n"</span><span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb8-3"><span class="ex" style="color: null;">Hello</span> world</span></code></pre></div>
</section>
<section id="rstudio" class="level2" data-number="5.2">
<h2 data-number="5.2" class="anchored" data-anchor-id="rstudio"><span class="header-section-number">5.2</span> Rstudio</h2>
<p>To connect to Rstudio server, open a web browser on your laptop.</p>
<ul>
<li><p><strong>Mac</strong> and <strong>Linux</strong> users should navigate to the URL <a href="http://localhost:8787" class="uri">http://localhost:8787</a>.</p></li>
<li><p><strong>Windows</strong> users should recall the IP address they noted back in section 2.1. Suppose your assigned IP was <code>192.168.99.100</code> (which is the one I have in the screenshot); navigate to the URL <a href="http://192.168.99.100:8787" class="uri">http://192.168.99.100:8787</a>. If you forgot the IP address, start up another Docker Terminal and run the following.</p></li>
</ul>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;">$</span> docker-machine ls</span></code></pre></div>
<p>A login prompt should appear in your browser. Enter <code>rstudio</code> as both the username and the password.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://andrewraim.github.io/images/Kerala2018/rstudio-server-login.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Logging into Rstudio Server</figcaption><p></p>
</figure>
</div>
<p>Now you should be ready to use Rstudio in your web browser.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://andrewraim.github.io/images/Kerala2018/rstudio-server-screen.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Rstudio Server in browser</figcaption><p></p>
</figure>
</div>
</section>
<section id="r-commander" class="level2" data-number="5.3">
<h2 data-number="5.3" class="anchored" data-anchor-id="r-commander"><span class="header-section-number">5.3</span> R Commander</h2>
<p>To launch the R Commander GUI, first start R via the command line or Rstudio. Then issue the following command.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fu" style="color: #4758AB;">library</span>(Rcmdr)</span></code></pre></div>
</section>
<section id="running-mpi-jobs" class="level2" data-number="5.4">
<h2 data-number="5.4" class="anchored" data-anchor-id="running-mpi-jobs"><span class="header-section-number">5.4</span> Running MPI Jobs</h2>
<p>To demonstrate running an MPI job, let us use a simple Hello World example. Open a text editor on your laptop and save the following code to the file <code>/path/to/workshop/hello.R</code></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">library</span>(pbdMPI, <span class="at" style="color: #657422;">quiet =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb11-2"></span>
<span id="cb11-3">msg <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sprintf</span>(<span class="st" style="color: #20794D;">"Hello world from process %d</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>, <span class="fu" style="color: #4758AB;">comm.rank</span>(), <span class="fu" style="color: #4758AB;">comm.size</span>())</span>
<span id="cb11-4"><span class="fu" style="color: #4758AB;">comm.cat</span>(<span class="st" style="color: #20794D;">"Say hello:</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>, <span class="at" style="color: #657422;">quiet =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb11-5"><span class="fu" style="color: #4758AB;">comm.cat</span>(msg, <span class="at" style="color: #657422;">all.rank =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="fu" style="color: #4758AB;">finalize</span>()</span></code></pre></div>
<p>Recall that this file will be accessible inside the container via the path <code>/home/rstudio/ext/hello.R</code>. Inside the container, you should be able to run the script in parallel via the <code>mpirun</code> command.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;">rstudio@a8f9a900c791:~$</span> mpirun <span class="at" style="color: #657422;">-np</span> 4 Rscript ~/ext/hello.R</span>
<span id="cb12-2"><span class="ex" style="color: null;">Say</span> hello:</span>
<span id="cb12-3"><span class="ex" style="color: null;">COMM.RANK</span> = 0</span>
<span id="cb12-4"><span class="ex" style="color: null;">Hello</span> world from process 0</span>
<span id="cb12-5"><span class="ex" style="color: null;">COMM.RANK</span> = 1</span>
<span id="cb12-6"><span class="ex" style="color: null;">COMM.RANK</span> = 2</span>
<span id="cb12-7"><span class="ex" style="color: null;">Hello</span> world from process 1</span>
<span id="cb12-8"><span class="ex" style="color: null;">Hello</span> world from process 2</span>
<span id="cb12-9"><span class="ex" style="color: null;">COMM.RANK</span> = 3</span>
<span id="cb12-10"><span class="ex" style="color: null;">Hello</span> world from process 3</span></code></pre></div>
<p>Outputs from the container should be saved to <code>/home/rstudio/ext</code>. This will allow you to view images, PDFs, etc using the tools already installed on your laptop.</p>
<p>If you made it this far, congratulations - your laptop is ready!</p>
</section>
</section>
<section id="more-on-docker" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> More on Docker</h1>
<p>For a list of Docker commands, see <a href="https://docs.docker.com/engine/reference/commandline/docker" class="uri">https://docs.docker.com/engine/reference/commandline/docker</a>. Here we will mention a few specific ones. If you would like a video tutorial, there appear to be several good ones on YouTube such as <a href="https://youtu.be/pa2wHWQ6WA8">this one</a>.</p>
<p>List active Docker containers.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;">$</span> [araim@araim-inspiron docker]$ docker ps</span>
<span id="cb13-2"><span class="ex" style="color: null;">CONTAINER</span> ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES</span>
<span id="cb13-3"><span class="ex" style="color: null;">f117630f47b8</span>        rworkshop           <span class="st" style="color: #20794D;">"/etc/start.sh"</span>     8 seconds ago       Up 7 seconds        0.0.0.0:8787-<span class="op" style="color: #5E5E5E;">&gt;</span>8787/tcp   hopeful_elion</span></code></pre></div>
<p>Normally, our rworkshop container will stop running when you log out of its shell. In case something went wrong with the container listed above and we wanted to kill it, we could use the following command from another terminal window.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;">$</span> docker kill f117630f47b8</span>
<span id="cb14-2"><span class="ex" style="color: null;">f117630f47b8</span></span></code></pre></div>
<p>List Docker images that have been deployed onto your machine.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;">$</span> docker images</span>
<span id="cb15-2"><span class="ex" style="color: null;">REPOSITORY</span>          TAG                 IMAGE ID            CREATED             SIZE</span>
<span id="cb15-3"><span class="ex" style="color: null;">rworkshop</span>           latest              d658ef03dc24        13 hours ago        1.98GB</span>
<span id="cb15-4"><span class="ex" style="color: null;">rocker/rstudio</span>      3.4.3               f206114fe549        3 weeks ago         1.08GB</span>
<span id="cb15-5"><span class="ex" style="color: null;">hello-world</span>         latest              1815c82652c0        6 months ago        1.84kB</span></code></pre></div>
<p>The <code>rworkshop</code> and <code>rocker/rstudio</code> images are rather large, so you may need to remove them after the workshop. Here we will remove the <code>hello-world</code> image, for demonstration purposes.</p>
<pre class="{bash}"><code>$ docker image rm 1815c82652c0
Untagged: hello-world:latest
Untagged: hello-world@sha256:f3b3b28a45160805bb16542c9531888519430e9e6d6ffc09d72261b0d26ff74f
Deleted: sha256:1815c82652c03bfd8644afda26fb184f2ed891d921b20a0703b46768f9755c57
Deleted: sha256:45761469c965421a92a69cc50e92c01e0cfa94fe026cdd1233445ea00e96289a</code></pre>
</section>
<section id="if-you-cannot-install-docker" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> If You Cannot Install Docker</h1>
<p>Installing and running Docker requires administrator-level access to your computer. For example, if using a laptop issued by your employer, you may not have administrator access but may have R and Rstudio already installed. For the benefit of these attendees, we will list individual components that we have used in preparing the workshop.</p>
<p>The major disadvantage of installing the components individually is that you may not be able to run some of the parallel and distributed computing examples. For example, the <a href="https://stat.ethz.ch/R-manual/R-devel/library/parallel/html/mclapply.html">mclapply function depends on forking</a>, and therefore cannot be used directly in Windows. Also, our distributed computing examples rely on MPI, but we (the presenters) do not have experience installing and configuring MPI libraries in Windows.</p>
<p>Check the version numbers of components which you may have already installed - especially R, Rstudio, and any R packages. Some parts of the workshop may not be accessible with older versions.</p>
<section id="install-r" class="level2" data-number="7.1">
<h2 data-number="7.1" class="anchored" data-anchor-id="install-r"><span class="header-section-number">7.1</span> Install R</h2>
<p>Install R from <a href="https://cran.r-project.org/">CRAN</a>. Windows users should navigate to “Download R for Windows” at the top of the page. We are using version 3.4.3.</p>
</section>
<section id="install-rstudio" class="level2" data-number="7.2">
<h2 data-number="7.2" class="anchored" data-anchor-id="install-rstudio"><span class="header-section-number">7.2</span> Install Rstudio</h2>
<p>Install <a href="https://www.rstudio.com/">Rstudio</a>. Click <code>Products =&gt; RStudio</code> on the top menu, and look for a button labeled <code>Download Rstudio Desktop</code>. Select <code>RStudio Desktop Open Source License</code> among the available versions. We are using version 1.1.383.</p>
</section>
<section id="install-the-rcpp-package" class="level2" data-number="7.3">
<h2 data-number="7.3" class="anchored" data-anchor-id="install-the-rcpp-package"><span class="header-section-number">7.3</span> Install the Rcpp package</h2>
<p>See <a href="https://support.rstudio.com/hc/en-us/articles/200486498-Package-Development-Prerequisites" class="uri">https://support.rstudio.com/hc/en-us/articles/200486498-Package-Development-Prerequisites</a> for instructions to install the prerequisites (compilers, important libraries, etc). Once the prerequisites are installed, simply install <code>Rcpp</code> as you would any other package.</p>
<p>To test your Rcpp environment, try the following in RStudio. 1. Select <code>File =&gt; New File =&gt; C++ File</code> from the main menu. This will create a simple Rcpp program.<br>
2. Save the program, say, as <code>example.cpp</code>.<br>
3. Click the <code>Source</code> button, which is located in the upper-right corner of the panel with the <code>example.cpp</code> source code. This should produce the following output.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fu" style="color: #4758AB;">timesTwo</span>(<span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb17-2">[<span class="dv" style="color: #AD0000;">1</span>] <span class="dv" style="color: #AD0000;">84</span></span></code></pre></div>
</section>
<section id="install-mpi" class="level2" data-number="7.4">
<h2 data-number="7.4" class="anchored" data-anchor-id="install-mpi"><span class="header-section-number">7.4</span> Install MPI</h2>
<p>There are several MPI implementations available, such as OpenMPI and MVAPICH2. The instructions will vary based on your choice of implementation, as well as your hardware and operating system. You are on your own here; good luck! If your installation is successful, you should be able to run the following minimal example.</p>
<p>First, create a new file called <code>hello_mpi.c</code> with the following contents.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb18-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;stdio.h&gt;</span></span>
<span id="cb18-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;mpi.h&gt;</span></span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="dt" style="color: #AD0000;">int</span> main <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> argc<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">*</span>argv<span class="op" style="color: #5E5E5E;">[])</span></span>
<span id="cb18-5"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb18-6">    <span class="dt" style="color: #AD0000;">int</span> id<span class="op" style="color: #5E5E5E;">,</span> np<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb18-7">    <span class="dt" style="color: #AD0000;">char</span> processor_name<span class="op" style="color: #5E5E5E;">[</span>MPI_MAX_PROCESSOR_NAME<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb18-8">    <span class="dt" style="color: #AD0000;">int</span> processor_name_len<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb18-9"></span>
<span id="cb18-10">    MPI_Init<span class="op" style="color: #5E5E5E;">(&amp;</span>argc<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>argv<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb18-11"></span>
<span id="cb18-12">    MPI_Comm_size<span class="op" style="color: #5E5E5E;">(</span>MPI_COMM_WORLD<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>np<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb18-13">    MPI_Comm_rank<span class="op" style="color: #5E5E5E;">(</span>MPI_COMM_WORLD<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>id<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb18-14">    MPI_Get_processor_name<span class="op" style="color: #5E5E5E;">(</span>processor_name<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>processor_name_len<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb18-15"></span>
<span id="cb18-16">    printf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Hello world from process </span><span class="sc" style="color: #5E5E5E;">%03d</span><span class="st" style="color: #20794D;"> out of </span><span class="sc" style="color: #5E5E5E;">%03d</span><span class="st" style="color: #20794D;">, processor name </span><span class="sc" style="color: #5E5E5E;">%s\n</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb18-17">        id<span class="op" style="color: #5E5E5E;">,</span> np<span class="op" style="color: #5E5E5E;">,</span> processor_name<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb18-18"></span>
<span id="cb18-19">    MPI_Finalize<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb18-20">    <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb18-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>Now compile and run the program with MPI.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="ex" style="color: null;">$</span> mpicc hello-mpi.c <span class="at" style="color: #657422;">-o</span> hello-mpi</span>
<span id="cb19-2"><span class="ex" style="color: null;">$</span> mpirun <span class="at" style="color: #657422;">-np</span> 4 hello-mpi</span>
<span id="cb19-3"><span class="ex" style="color: null;">Hello</span> world from process 000 out of 004, processor name localhost</span>
<span id="cb19-4"><span class="ex" style="color: null;">Hello</span> world from process 001 out of 004, processor name localhost</span>
<span id="cb19-5"><span class="ex" style="color: null;">Hello</span> world from process 002 out of 004, processor name localhost</span>
<span id="cb19-6"><span class="ex" style="color: null;">Hello</span> world from process 003 out of 004, processor name localhost</span></code></pre></div>
<p>Depending on your platform and choice of MPI implementation, your commands may be different. The string <code>localhost</code> in the output will be replaced with your machine’s hostname.</p>
</section>
<section id="install-r-packages" class="level2" data-number="7.5">
<h2 data-number="7.5" class="anchored" data-anchor-id="install-r-packages"><span class="header-section-number">7.5</span> Install R Packages</h2>
<p>Download the script <a href="https://drive.google.com/uc?export=view&amp;id=12273JFSirYb1G8pPx9fRYNtgZ6IrpFGx">install.R</a> and run it in R to obtain packages which will be used in the workshop. Suppose we have placed it into the directory <code>/path/to/workshop</code>. Run the following command in R.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fu" style="color: #4758AB;">source</span>(<span class="st" style="color: #20794D;">"/path/to/workshop/install.R"</span>)</span></code></pre></div>
<p>To make sure your package versions are up to date, open Rstudio and click <code>Tools =&gt; Check for Package Updates</code> on the main menu.</p>


</section>
</section>

 ]]></description>
  <category>workshops</category>
  <guid>https://andrewraim.github.io/posts/2017-12-20-Kerala-workshop.html</guid>
  <pubDate>Fri, 05 Jan 2018 05:00:00 GMT</pubDate>
  <media:content url="https://andrewraim.github.io/images/Kerala2018/win-docker-prompt.png" medium="image" type="image/png" height="82" width="144"/>
</item>
<item>
  <title>Rcpp Workshop at UMBC</title>
  <link>https://andrewraim.github.io/posts/2017-08-07-UMBC-workshop-Rcpp.html</link>
  <description><![CDATA[ 



<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Please note that the workshop date has been moved from Friday Sept 8, 2017 to Friday Sept 22, 2017. See below for details.</p>
</div>
</div>
<p>Iris Gauran and I are planning to give a half-day workshop on Rcpp at UMBC. Tentative details are given below. Part of the workshop will be a “quick start”, where we will demonstrate accessing C++ code from R via toy examples. Attendees are encouraged to prepare their laptops for Rcpp programming, and bring them to the workshop to follow along with this portion.</p>
<p>We will focus on Rcpp programming in RStudio, which provides a common interface across all major platforms (Windows, Mac, and Linux), and helps to automate some procedural tasks.</p>
<ol type="1">
<li>Install R (<a href="http://www.r-project.org" class="uri">http://www.r-project.org</a>). The current version as of this writing is 3.4.1 “Single Candle”.</li>
<li>Install RStudio Desktop (<a href="http://www.rstudio.com" class="uri">http://www.rstudio.com</a>). The current version is 1.0.153.</li>
<li>Install the <code>Rcpp</code>, <code>RcppArmadillo</code>, and <code>RcppGSL</code> packages.</li>
<li>Some additional libraries may be needed to compile C++ programs on your computer. These differ depending on your operating system. See <a href="http://support.rstudio.com/hc/en-us/articles/200486498-Package-Development-Prerequisites" class="uri">http://support.rstudio.com/hc/en-us/articles/200486498-Package-Development-Prerequisites</a>.</li>
</ol>
<p>This may be a good time to upgrade if you have older versions of R, RStudio, or any of the listed packages.</p>
<p>To test your Rcpp environment, try the following in RStudio.</p>
<ol type="1">
<li>Select <code>File =&gt; New File =&gt; C++ File</code> from the main menu. This will create a simple Rcpp program.</li>
<li>Save the program, say, as <code>example.cpp</code>.</li>
<li>Click the <code>Source</code> button, which is located in the upper-right corner of the panel with the <code>example.cpp</code> source code. This should produce the output</li>
</ol>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">R<span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fu" style="color: #4758AB;">timesTwo</span>(<span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb1-2">[<span class="dv" style="color: #AD0000;">1</span>] <span class="dv" style="color: #AD0000;">84</span></span></code></pre></div>
<hr>
<p><strong>Location:</strong> University of Maryland, Baltimore County.<br>
<strong>Room:</strong> MP 401 (Math/Stat Seminar Room).<br>
<strong>Time:</strong> Friday Sept 22, 1 - 4:30pm.<br>
<strong>Cost:</strong> This workshop is free for the UMBC community.<br>
<strong>Prerequisites:</strong> intermediate knowledge in a high level language like R, Python, or Matlab. Familiarity with R and RStudio is highly recommended.<br>
<strong>Snacks:</strong> Light refreshments (coffee and bagels) will be provided.</p>
<p><strong>Abstract</strong><br>
R is the preferred computing environment for many statisticians, and is used both in research and applied problems. R has achieved tremendous popularity because it is free, open source, and available on all modern platforms (Windows, Mac, and Linux). The R programming language is simple and intuitive, and well-suited for fast prototyping of complicated algorithms. However, R users can often find the performance of their programs to be lacking.</p>
<p>This workshop will demonstrate Rcpp, an extension of R that facilitates interoperability between R and C++ (Eddelbuettel, 2013). With Rcpp, computationally intensive parts of your program can be written in C++ and seamlessly called from R, potentially giving dramatic performance improvements within the familiar R user environment. We will provide a quick start for new Rcpp users through simple examples, and also examine several larger-scale statistical applications. C++ programming is usually more burdensome than R programming, so we will discuss tradeoffs between optimizing R code and migrating to C++, and ways to minimize suffering while making the transition.</p>
<p><strong>References</strong></p>
<ul>
<li>Dirk Eddelbuettel. Seamless R and C++ Integration with Rcpp. Springer, 2013.</li>
<li>Also see <a href="http://www.rcpp.org" class="uri">http://www.rcpp.org</a>.</li>
</ul>



 ]]></description>
  <category>workshops</category>
  <guid>https://andrewraim.github.io/posts/2017-08-07-UMBC-workshop-Rcpp.html</guid>
  <pubDate>Mon, 07 Aug 2017 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Web Page Migration</title>
  <link>https://andrewraim.github.io/posts/2017-03-15-new-webpage.html</link>
  <description><![CDATA[ 



<p>I am now using <a href="https://pages.github.com">GitHub Pages</a> to host my website, along with the static site generator <a href="https://jekyllrb.com">Jekyll</a>. My <a href="http://www.umbc.edu/~araim1">previous website</a> was hosted at UMBC.</p>
<p>Here is a quick test of <a href="http://gastonsanchez.com/visually-enforced/opinion/2014/02/16/Mathjax-with-jekyll">MathJax</a>. An inline equation is <img src="https://latex.codecogs.com/png.latex?f(x)%20=%20x%5E2%20e%5E%7B-x%7D"> inline. And an equation on its own line is</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5CPhi(x)%20=%0A%5Cint_%7B-%5Cinfty%7D%5E%7Bx%7D%20%5Cfrac%7B1%7D%7B%5Csigma%20%5Csqrt%7B2%5Cpi%7D%7D%0A%5Cexp%20%5Cleft(%20-%5Cfrac%7B1%7D%7B2%5Csigma%5E2%7D%20(t%20-%20%5Cmu)%5E2%20%5Cright)%20dt.%0A"></p>
<p>Here is an example of code.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">x <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">hist</span>(x)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://andrewraim.github.io/posts/2017-03-15-new-webpage_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>



 ]]></description>
  <category>programming</category>
  <guid>https://andrewraim.github.io/posts/2017-03-15-new-webpage.html</guid>
  <pubDate>Wed, 15 Mar 2017 04:00:00 GMT</pubDate>
</item>
</channel>
</rss>
